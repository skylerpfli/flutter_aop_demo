From 855e4b679c0e36a0a4a29acbf001d39d49c8481c Mon Sep 17 00:00:00 2001
From: skylerpfli <skylerpfli@tencent.com>
Date: Wed, 22 Mar 2023 16:15:41 +0800
Subject: [PATCH] xxx

---
 packages/flutter_tools/bin/flutter_tools.dart |   1 +
 .../lib/src/build_system/targets/web.dart     |  12 +-
 packages/flutter_tools/lib/src/compile.dart   |  12 +-
 packages/flutter_tools/lib/src/hook.dart      | 114 ++++++++++++++++++
 4 files changed, 133 insertions(+), 6 deletions(-)
 create mode 100644 packages/flutter_tools/lib/src/hook.dart

diff --git a/packages/flutter_tools/bin/flutter_tools.dart b/packages/flutter_tools/bin/flutter_tools.dart
index 1cad0ded07..0643b7353c 100644
--- a/packages/flutter_tools/bin/flutter_tools.dart
+++ b/packages/flutter_tools/bin/flutter_tools.dart
@@ -7,5 +7,6 @@
 import 'package:flutter_tools/executable.dart' as executable;
 
 void main(List<String> args) {
+  print('FlutterAop execute command: ${args.join(' ')}');
   executable.main(args);
 }
diff --git a/packages/flutter_tools/lib/src/build_system/targets/web.dart b/packages/flutter_tools/lib/src/build_system/targets/web.dart
index 35b7b4e765..5415267d8d 100644
--- a/packages/flutter_tools/lib/src/build_system/targets/web.dart
+++ b/packages/flutter_tools/lib/src/build_system/targets/web.dart
@@ -26,6 +26,7 @@ import '../depfile.dart';
 import '../exceptions.dart';
 import 'assets.dart';
 import 'localizations.dart';
+import '../../hook.dart';
 
 /// Whether the application has web plugins.
 const String kHasWebPlugins = 'HasWebPlugins';
@@ -183,10 +184,13 @@ class Dart2JSTarget extends Target {
     final bool nativeNullAssertions = environment.defines[kNativeNullAssertions] == 'true';
     final Artifacts artifacts = globals.artifacts!;
     final String librariesSpec = (artifacts.getHostArtifact(HostArtifact.flutterWebSdk) as Directory).childFile('libraries.json').path;
+    String? dart2jsSnapshot = await TransformHook.fetchTransformSnapshot(isWeb: true);
+    print('ConchFlutter web hookCompile isEnable: ${dart2jsSnapshot != null}');
+    dart2jsSnapshot ??= artifacts.getHostArtifact(HostArtifact.dart2jsSnapshot).path;
     final List<String> sharedCommandOptions = <String>[
       artifacts.getHostArtifact(HostArtifact.engineDartBinary).path,
       '--disable-dart-dev',
-      artifacts.getHostArtifact(HostArtifact.dart2jsSnapshot).path,
+      dart2jsSnapshot,
       '--libraries-spec=$librariesSpec',
       ...decodeCommaSeparated(environment.defines, kExtraFrontEndOptions),
       if (nativeNullAssertions)
@@ -203,14 +207,16 @@ class Dart2JSTarget extends Target {
 
     // Run the dart2js compilation in two stages, so that icon tree shaking can
     // parse the kernel file for web builds.
-    final ProcessResult kernelResult = await globals.processManager.run(<String>[
+    final List<String> options = <String>[
       ...sharedCommandOptions,
       '-o',
       environment.buildDir.childFile('app.dill').path,
       '--packages=.dart_tool/package_config.json',
       '--cfe-only',
       environment.buildDir.childFile('main.dart').path, // dartfile
-    ]);
+    ];
+    print('ConchFlutter Dart2JS compile command: ${options.join(' ')}');
+    final ProcessResult kernelResult = await globals.processManager.run(options);
     if (kernelResult.exitCode != 0) {
       throw Exception(_collectOutput(kernelResult));
     }
diff --git a/packages/flutter_tools/lib/src/compile.dart b/packages/flutter_tools/lib/src/compile.dart
index 8733f87396..141d120b26 100644
--- a/packages/flutter_tools/lib/src/compile.dart
+++ b/packages/flutter_tools/lib/src/compile.dart
@@ -2,6 +2,7 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+import 'hook.dart';
 import 'dart:async';
 import 'dart:typed_data';
 
@@ -248,9 +249,13 @@ class KernelCompiler {
     required List<String> dartDefines,
     required PackageConfig packageConfig,
   }) async {
-    final String frontendServer = _artifacts.getArtifactPath(
-      Artifact.frontendServerSnapshotForEngineDartSdk
-    );
+    /// 插桩工程，有限
+    String? frontendServer = await TransformHook.fetchTransformSnapshot(isWeb: false);
+    print('FlutterAop isEnable: ${frontendServer != null}');
+
+    /// 默认
+    frontendServer ??= _artifacts.getArtifactPath(Artifact.frontendServerSnapshotForEngineDartSdk);
+
     // This is a URI, not a file path, so the forward slash is correct even on Windows.
     if (!sdkRoot.endsWith('/')) {
       sdkRoot = '$sdkRoot/';
@@ -336,6 +341,7 @@ class KernelCompiler {
       mainUri,
     ];
 
+    print('FlutterAop compile command: ${command.join(' ')}');
     _logger.printTrace(command.join(' '));
     final Process server = await _processManager.start(command);
 
diff --git a/packages/flutter_tools/lib/src/hook.dart b/packages/flutter_tools/lib/src/hook.dart
new file mode 100644
index 0000000000..63de7a0a5c
--- /dev/null
+++ b/packages/flutter_tools/lib/src/hook.dart
@@ -0,0 +1,114 @@
+// Copyright 2018 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+import 'dart:io';
+
+import 'package:package_config/package_config.dart';
+
+import 'artifacts.dart';
+import 'base/common.dart';
+import 'base/file_system.dart';
+import 'build_system/build_system.dart';
+import 'build_system/targets/common.dart';
+import 'cache.dart';
+import 'compile.dart';
+import 'dart/package_map.dart';
+import 'globals.dart' as globals;
+import 'dart/pub.dart';
+
+// ignore: avoid_classes_with_only_static_members
+/// transform
+class TransformHook {
+  //snapshot名
+  static const String hookSnapshot = 'hook.snapshot';
+
+  //传入.package路径，获取某一依赖的路径
+  static Future<Directory?> _getPackagePathFromConfig(String packageConfigPath, String packageName) async {
+    final PackageConfig packageConfig = await loadPackageConfigWithLogging(
+      globals.fs.file(packageConfigPath),
+      logger: globals.logger,
+    );
+    if (packageConfig.packages.isNotEmpty) {
+      try {
+        final Package targetPackage = packageConfig.packages.toList().firstWhere((Package element) => element.name == packageName);
+        return globals.fs.directory(targetPackage.root.toFilePath());
+        // ignore: avoid_catches_without_on_clauses
+      } catch (e) {
+        return null;
+      }
+    }
+    return null;
+  }
+
+  //获取dart sdk依赖
+  static Future<String> getDartSdkDependency(String workingDirectory) async {
+    await pub.get(context: PubContext.createPackage, directory: workingDirectory, printProgress: false).catchError((e) {
+      print('ConchFlutter getDartSdkDependency unexpected error: $e');
+      throwToolExit('ConchFlutter getDartSdkDependency unexpected error: $e');
+    });
+    final Directory? kernelDir = await _getPackagePathFromConfig(globals.fs.path.join(workingDirectory, '.packages'), 'kernel');
+    return kernelDir?.parent.parent.uri.toString() ?? '';
+  }
+
+  //获取frontedServer路径，位于主工程/transform/lib/flutter_frontend_server目录下
+  static Future<Directory> getFlutterFrontendServerDirectory(String path) async {
+    return globals.fs.directory(globals.fs.path.join(path, 'transform', 'lib', 'flutter_frontend_server'));
+  }
+
+  //获取FlutterAop的frontend_server snapshot路径
+  static Future<String?> fetchTransformSnapshot({required bool isWeb}) async {
+    final Directory currentDirectory = globals.fs.currentDirectory;
+    if (!currentDirectory.existsSync()) {
+      return null;
+    }
+    final String packagesPath = currentDirectory.absolute.path;
+
+    final Directory hookDirectory = await getFlutterFrontendServerDirectory(packagesPath);
+
+    if (!hookDirectory.existsSync()
+        && (!isWeb && globals.fs.file(globals.fs.path.join(hookDirectory.path, 'starter.dart')).existsSync() || isWeb && globals.fs.file(globals.fs.path.join(hookDirectory.path, 'starter_web.dart')).existsSync())
+        && globals.fs.file(globals.fs.path.join(currentDirectory.path, 'pubspec.yaml')).existsSync()
+        && globals.fs.file(globals.fs.path.join(currentDirectory.path, 'lib', 'main.dart')).existsSync()
+    ) {
+    return null;
+    }
+
+    final String hookFlutterFrontendServerSnapshot = globals.fs.path.join(hookDirectory.absolute.path, hookSnapshot);
+
+    //每次都重新生成FrontendServerSnapshot
+    if (globals.fs.file(hookFlutterFrontendServerSnapshot).existsSync()) {
+    globals.fs.file(hookFlutterFrontendServerSnapshot).deleteSync();
+    }
+    final String dartSdkDir = await getDartSdkDependency(globals.fs.path.join(packagesPath, 'transform'));
+    final String frontendServerPackageConfigJsonFile = '${hookDirectory.absolute.path}/package_config.json';
+    final String rebasedFrontendServerPackageConfigJsonFile = '${hookDirectory.absolute.path}/rebased_package_config.json';
+    String frontendServerPackageConfigJson = globals.fs.file(frontendServerPackageConfigJsonFile).readAsStringSync();
+    frontendServerPackageConfigJson = frontendServerPackageConfigJson.replaceAll('../../../third_party/dart/', dartSdkDir);
+    globals.fs.file(rebasedFrontendServerPackageConfigJsonFile).writeAsStringSync(frontendServerPackageConfigJson);
+
+    final List<String> commands = <String>[
+    globals.artifacts!.getHostArtifact(HostArtifact.engineDartBinary).path,
+    '--deterministic',
+    '--packages=$rebasedFrontendServerPackageConfigJsonFile',
+    '--snapshot=$hookFlutterFrontendServerSnapshot',
+    '--snapshot-kind=kernel',
+    '${hookDirectory.absolute.path}/${isWeb ? 'starter_web.dart' : 'starter.dart'}'
+    ];
+    final ProcessResult processResult = await globals.processManager.run(commands);
+    final String dartToolPackageConfigFile = globals.fs.path.join(packagesPath, 'transform', '.dart_tool', 'package_config.json');
+    await globals.processManager.run(<String>['cp', '-rf', rebasedFrontendServerPackageConfigJsonFile, dartToolPackageConfigFile]);
+    globals.fs.file(rebasedFrontendServerPackageConfigJsonFile).deleteSync();
+    if (processResult.exitCode != 0 || !globals.fs.file(hookFlutterFrontendServerSnapshot).existsSync()) {
+    print('ConchFlutter fetchTransformSnapshot unexpected error: ${processResult.stderr.toString()}');
+    throwToolExit('ConchFlutter fetchTransformSnapshot unexpected error: ${processResult.stderr.toString()}');
+    }
+
+    if (!globals.fs.file(hookFlutterFrontendServerSnapshot).existsSync()) {
+    return null;
+    }
+
+    return
+    hookFlutterFrontendServerSnapshot;
+  }
+}
-- 
2.32.1 (Apple Git-133)

